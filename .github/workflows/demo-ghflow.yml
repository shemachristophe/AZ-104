name: CI PR

on:
  workflow_call:
    secrets: 
      #GITHUB_TOKEN:
        #required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      MYENV:
        required: true
        description: "my env"
        type: string
    
  
jobs:
  build:
    name: Validate and Plan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false
      
        
      - name: Terraform Init ${{ inputs.MYENV }}
        run: terraform init
        working-directory: '.github/terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Terraform Validate
        run: terraform validate
        working-directory: '.github/terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Terraform Plan
        id: plan_hello
        shell: bash
        run: |
          source ../../.github/workflows/run_plan.sh
          get_terraform_plan_return_message > tf.plan
          
        working-directory: '.github/terraform'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_CLI_ARGS: '-var-file="../../.github/terraform/env/dev.tfvars"'
          
      - name: Check for Plan Failure
        shell: bash
        #if: steps.plan_hello.outputs.planExitMsg == 'State Change Detected!'
        run: echo 'output is ${{steps.plan_hello.outputs.planExitMsg}}'   
        
      - name: Terraform show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        
      
    outputs:
      build-output: ${{ steps.plan_hello.outputs.planExitMsg }}
      
  apply:    
    name: Apply terraform plan
    needs: build
    #if: ${{ !startsWith(needs.build.outputs.build-output, 'No') }}
    #if: always() && ${{ needs.build.outputs.build-output == 'State Change Detected!'}}
    #no-approval
    
    runs-on: ubuntu-latest

    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/github-script@v6.3.3
        if: ${{ github.event_name == 'pull_request' }}
        with: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            
            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      
      - name: Output Job Value
        shell: bash
        #run: echo 'output job2 check ${{needs.build.outputs.build-output}}'
        run: echo ${{needs.build.outputs.build-output}}
        
      - name: Apply Terraform to Prod
        if: ${{ !contains(needs.build.outputs.build-output, 'no-approval') }}
        uses: ./.github/actions/deploy_ci
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: 'PRODUCTION'
          DIRECTORY: 'terraform'
          
